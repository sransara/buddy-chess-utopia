<script lang="typescript">
  import Splash from "./splash.svelte";
  import BuddyChessground from "../../components/BuddyChessground.svelte";
  import Sidebar from "../../components/Sidebar.svelte";

  import { onMount, onDestroy } from "svelte";
  import { fade } from "svelte/transition";
  import { replace } from "svelte-spa-router";

  import { EventBusSingleton as EventBus } from "light-event-bus";

  import { _roomId$, roomId$, _playerId$, playerId$, spots$, _gamen$, gamen$, wizard$ } from "../../common/datastore";
  import {
    aFEN$,
    bFEN$,
    aWhiteClock$,
    aWhiteSpares$,
    aBlackClock$,
    aBlackSpares$,
    bWhiteClock$,
    bWhiteSpares$,
    bBlackClock$,
    bBlackSpares$,
  } from "./store";
  import * as global from "../../common/dataglobal";
  import * as msgbus from "../../common/msgbus";
  import * as wizard from "../../common/wizard";
  import * as utils from "../../common/utils";
  import { allSpotsInSync } from "../Room/common";

  import * as chessx from "./chessx";
  import { Api } from "chessground/api";
  import { Config } from "chessground/config";
  import * as cgtypes from "chessground/types";
  import { Chess } from "chess.js";

  export let params: any = {};

  $: if (wizard.isAfter($wizard$, wizard.steps.WAIT_FOR_SPOTS)) {
    if ($playerId$ == "host") {
      if (params.action != "create" || params.id != $roomId$) {
        replace(`/game/create/${$roomId$}`);
      }
    } else if (params.action != "join" || params.id != $roomId$) {
      replace(`/game/join/${$roomId$}`);
    }
  } else if ($_roomId$ && $_playerId$) {
    if ($_playerId$ == "host") {
      replace(`/room/create/${$_roomId$}`);
    } else {
      replace(`/room/join/${$_roomId$}`);
    }
  } else {
    replace("/");
  }

  // just a hacky way to fit the game view to window sizes
  // - resize game view to fill window height
  // - but make sure not to overflow on the x-axis
  // - TODO: make sure a square is not too big
  let visibleSplash = true;
  // @ts-ignore
  let buddyChessground: HTMLElement = undefined;
  function fitViewport() {
    // assume scroll bar width: 15
    const rect = buddyChessground.getBoundingClientRect();
    const nextH = Math.floor(window.innerHeight - utils.convertRemToPixels(5));
    const currentW = rect.right - rect.left;
    const currentH = rect.bottom - rect.top;
    let nextW = (nextH * currentW) / currentH;
    const maxW = (window.innerWidth * 4) / 5 - 15;
    nextW = Math.min(nextW, maxW);
    buddyChessground.style.width = `${Math.floor(nextW)}px`;
  }

  onMount(async () => {
    document.body.style.overflow = "hidden";
    window.addEventListener("resize", fitViewport);
    await utils.sleep(1000);
    fitViewport();
    if (wizard.isAfter($wizard$, wizard.steps.WAIT_FOR_GAME)) visibleSplash = false;
  });

  onDestroy(() => {
    document.body.style.overflow = "auto";
    window.removeEventListener("resize", fitViewport);
  });

  const colors: cgtypes.Color[] = $gamen$ % 2 == 0 ? ["white", "black"] : ["black", "white"];
  const spids = Object.keys($spots$).sort();

  const myTeam = spids.filter((pid) => $spots$[pid]["team"] == $spots$[$playerId$]["team"]);
  const opTeam = spids.filter((pid) => $spots$[pid]["team"] != $spots$[$playerId$]["team"]);
  const myColor = colors[myTeam.indexOf($playerId$)];
  const opColor = myColor == "white" ? "black" : "white";
  const myId = $playerId$;
  const opId = opTeam[colors.indexOf(opColor)];
  const buddyColor = opColor;
  const buddyId = myTeam[colors.indexOf(buddyColor)];
  const buddyOpColor = myColor;
  const buddyOpId = opTeam[colors.indexOf(buddyOpColor)];

  const myChess = new Chess($bFEN$);
  const buddyChess = new Chess($aFEN$);

  let bInteractive: cgtypes.Color | false = myColor;
  let aInteractive: cgtypes.Color | false = false;

  const seating: any = utils.tree();
  seating["b"][myColor]["id"] = myId;
  seating["b"][myColor]["name"] = $spots$[myId]["name"];
  seating["b"][myColor]["avatar"] = $spots$[myId]["avatar"];
  seating["b"][myColor]["team"] = $spots$[myId]["team"];
  seating["b"][opColor]["id"] = opId;
  seating["b"][opColor]["name"] = $spots$[opId]["name"];
  seating["b"][opColor]["avatar"] = $spots$[opId]["avatar"];
  seating["b"][opColor]["team"] = $spots$[opId]["team"];
  seating["a"][buddyColor]["id"] = buddyId;
  seating["a"][buddyColor]["name"] = $spots$[buddyId]["name"];
  seating["a"][buddyColor]["avatar"] = $spots$[buddyId]["avatar"];
  seating["a"][buddyColor]["team"] = $spots$[buddyId]["team"];
  seating["a"][buddyOpColor]["id"] = buddyOpId;
  seating["a"][buddyOpColor]["name"] = $spots$[buddyOpId]["name"];
  seating["a"][buddyOpColor]["avatar"] = $spots$[buddyOpId]["avatar"];
  seating["a"][buddyOpColor]["team"] = $spots$[buddyOpId]["team"];
  let aWhiteName: string = seating["a"]["white"]["name"];
  let aWhiteAvatar: string = seating["a"]["white"]["avatar"];
  let aWhiteTeam: string = seating["a"]["white"]["team"];
  let aBlackName: string = seating["a"]["black"]["name"];
  let aBlackAvatar: string = seating["a"]["black"]["avatar"];
  let aBlackTeam: string = seating["a"]["black"]["team"];
  let bWhiteName: string = seating["b"]["white"]["name"];
  let bWhiteAvatar: string = seating["b"]["white"]["avatar"];
  let bWhiteTeam: string = seating["b"]["white"]["team"];
  let bBlackName: string = seating["b"]["black"]["name"];
  let bBlackAvatar: string = seating["b"]["black"]["avatar"];
  let bBlackTeam: string = seating["b"]["black"]["team"];

  // @ts-ignore
  let aChessground: Api = undefined;
  // @ts-ignore
  let bChessground: Api = undefined;

  const aChessgroundConfig: Config = {
    orientation: opColor,
    viewOnly: true,
  };

  const bChessgroundConfig: Config = {
    orientation: myColor,
    movable: {
      color: myColor,
      free: false,
    },
    draggable: {
      enabled: true,
      showGhost: true,
    },
    premovable: {
      enabled: true,
    },
    predroppable: {
      enabled: true,
    },
  };

  onMount(() => {
    if (wizard.isIn($wizard$, wizard.steps.PRE_GAME, "todo")) preGame();

    buddyChess.load($aFEN$);
    myChess.load($bFEN$);

    chessx.loadChessgroundStateFromChess(aChessground, buddyChess);
    chessx.loadChessgroundStateFromChess(bChessground, myChess);
  });

  function subsconce() {
    EventBus.subscribe("updatedSpots", () => {
      if (wizard.isIn($wizard$, wizard.steps.WAIT_FOR_GAME, "doing")) {
        if (allSpotsInSync($spots$, $wizard$, $gamen$)) {
          $wizard$ = wizard.next($wizard$);
          gameTime();
        }
      }
    });
  }

  function preGame() {
    $wizard$ = wizard.next($wizard$, subsconce);

    const initClockState = {
      waiting: false,
      minutes: 5,
      seconds: 0,
    };

    const initSpareState = {
      dropType: undefined,
      dropPiece: undefined,
      pawnCount: 0,
      knightCount: 0,
      bishopCount: 0,
      rookCount: 0,
      queenCount: 0,
    };

    $aWhiteClock$ = { ...initClockState };
    $aWhiteSpares$ = { ...initSpareState };
    $aBlackClock$ = { ...initClockState };
    $aBlackSpares$ = { ...initSpareState };
    $bWhiteClock$ = { ...initClockState };
    $bWhiteSpares$ = { ...initSpareState };
    $bBlackClock$ = { ...initClockState };
    $bBlackSpares$ = { ...initSpareState };

    $aFEN$ = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    $bFEN$ = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";

    $wizard$ = wizard.next($wizard$);
  }

  function waitForGame() {
    $wizard$ = wizard.next($wizard$);
    $spots$ = { ...$spots$, [$playerId$]: { ...$spots$[$playerId$], gamen: $gamen$, wizard: $wizard$ } };
    msgbus.sendAll(global.players, $roomId$, $playerId$, Object.keys($spots$), "updateSpots", $spots$);
    if ($playerId$ == "host") EventBus.publish("updatedSpots");
  }

  function gameTime() {
    $wizard$ = wizard.next($wizard$);
    visibleSplash = false;
  }
</script>

<style>
  @keyframes shake {
    10%,
    90% {
      transform: translate3d(-1px, 0, 0);
    }

    20%,
    80% {
      transform: translate3d(2px, 0, 0);
    }

    30%,
    50%,
    70% {
      transform: translate3d(-4px, 0, 0);
    }

    40%,
    60% {
      transform: translate3d(4px, 0, 0);
    }
  }

  .shaking {
    animation: shake 1s infinite;
    transform: translate3d(0, 0, 0);
  }
</style>

{#if visibleSplash}
  <div out:fade class="w-full h-full fixed flex left-0 bg-white items-center justify-center z-50">
    <div class="flex flex-col" class:shaking="{aInteractive}">
      <div class="flex w-64 h-32">
        <span class="inline-block w-1/2 h-full bg-gray-200 border border-gray-400">
          <Avatar avatar="{aTopAvatar}" />
        </span>
        <span class="inline-block w-1/2 h-full cg-square dark">
          <Piece role="king" color="{aTopColor}" />
        </span>
      </div>
      <div class="flex w-64 h-32">
        <span class="inline-block w-1/2 h-full cg-square dark"></span>
        <span class="inline-block w-1/2 h-full cg-square light"></span>
      </div>
      <div class="flex w-64 h-32">
        <span class="inline-block w-1/2 h-full bg-gray-200 border border-gray-400">
          <Avatar avatar="{aBottomAvatar}" />
        </span>
        <span class="inline-block w-1/2 h-full cg-square dark">
          <Piece role="king" color="{aBottomColor}" />
        </span>
      </div>
      <div class="flex w-64 h-16 items-center justify-center text-3xl bg-yellow-500">
        {aInteractive ? 'You' : 'Your buddy'}
      </div>
    </div>
    <div class="flex flex-col">
      <div class="flex w-32 h-32 items-center justify-center text-4xl font-serif">&amp;</div>
      <div class="flex w-32 h-32 items-center justify-center text-6xl font-serif">vs</div>
      <div class="flex w-32 h-32 items-center justify-center text-4xl font-serif">&amp;</div>
      <div class="flex w-32 h-16 items-center justify-center font-serif"></div>
    </div>
    <div class="flex flex-col" class:shaking="{bInteractive}">
      <div class="flex w-64 h-32">
        <span class="inline-block w-1/2 h-full bg-gray-200 border border-gray-400">
          <Avatar avatar="{bTopAvatar}" />
        </span>
        <span class="inline-block w-1/2 h-full cg-square dark">
          <Piece role="king" color="{bTopColor}" />
        </span>
      </div>
      <div class="flex w-64 h-32">
        <span class="inline-block w-1/2 h-full cg-square dark"></span>
        <span class="inline-block w-1/2 h-full cg-square light"></span>
      </div>
      <div class="flex w-64 h-32">
        <span class="inline-block w-1/2 h-full bg-gray-200 border border-gray-400">
          <Avatar avatar="{bBottomAvatar}" />
        </span>
        <span class="inline-block w-1/2 h-full cg-square dark">
          <Piece role="king" color="{bBottomColor}" />
        </span>
      </div>
      <div class="flex w-64 h-16 items-center justify-center text-3xl bg-yellow-500">
        {bInteractive ? 'You' : 'Your buddy'}
      </div>
    </div>
  </div>
{/if}
<div class="w-full h-full overflow-hidden flex items-center justify-between">
  <div class="inline-block my-0 mx-auto">
    <BuddyChessground
      bind:buddyChessground
      bind:aChessground
      {aChessgroundConfig}
      {aInteractive}
      {aWhiteAvatar}
      aWhiteClock="{$aWhiteClock$}"
      aWhiteSpares="{$aWhiteSpares$}"
      {aBlackAvatar}
      aBlackClock="{$aBlackClock$}"
      aBlackSpares="{$aBlackSpares$}"
      bind:bChessground
      {bChessgroundConfig}
      {bInteractive}
      {bWhiteAvatar}
      bWhiteClock="{$bWhiteClock$}"
      bWhiteSpares="{$bWhiteSpares$}"
      {bBlackAvatar}
      bBlackClock="{$bBlackClock$}"
      bBlackSpares="{$bBlackSpares$}"
    />
  </div>
  <Sidebar>
    <div class="container mb-1 border border-gray-400">
      <div class="p-1 bg-gray-800 text-gray-200 whitespace-no-wrap">Room overview</div>
      <div></div>
    </div>
    <div class="container mb-1 border border-gray-400">
      <div class="p-1 bg-gray-800 text-gray-200 whitespace-no-wrap">Actions</div>
      <div>a</div>
    </div>
    <div class="flex-grow container border border-gray-400">
      <div class="p-1 bg-gray-800 text-gray-200 whitespace-no-wrap">Room chat</div>
      <div></div>
    </div>
  </Sidebar>
</div>
